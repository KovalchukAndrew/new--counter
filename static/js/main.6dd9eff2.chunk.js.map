{"version":3,"sources":["Components/Counter/Button.tsx","Components/Counter/Display.tsx","Components/Counter/Counter.tsx","Components/Settings/Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","className","disabled","onClick","callBack","title","Display","isSettingsInvalid","value","maxValue","Counter","useState","isIncButtonDisabled","setIsIncButtonDisabled","useEffect","valueToIncrement","incValue","resetCounter","Settings","startValue","setStartValue","setMaxValue","isSetButtonDisabled","setIsSetButtonDisabled","setIsSettingsInvalidCallback","type","max","min","onChange","e","parseInt","currentTarget","setNewValuesCallback","App","localStorage","getItem","setValueToIncrement","setIsSettingsInvalid","setX","newStartValue","newMaxValue","newCounterValue","setItem","JSON","stringify","setLocalStorage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6dd9eff2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport type ButtonPropsType = {\r\n\r\n    title: string\r\n    callBack: () => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n    const useButton = () => {\r\n        props.callBack()\r\n    }\r\n    return <div>\r\n        <button\r\n            className={props.disabled ? \"disabled\" : \"button\"}\r\n            disabled={props.disabled}\r\n            onClick={useButton}\r\n        >{props.title}</button>\r\n    </div>\r\n}","import React from \"react\";\r\nimport '../../App.css'\r\n\r\n\r\nexport type DisplayPropsType = {\r\n    value: number\r\n    maxValue: number\r\n    isSettingsInvalid: boolean\r\n}\r\n\r\nexport const Display = (props: DisplayPropsType) => {\r\n\r\n    return <div className={\"display\"}>\r\n        {props.isSettingsInvalid && <span className=\"error\">Setting Invalid</span>}\r\n        {!props.isSettingsInvalid && <span className={props.value===props.maxValue? \"error\" : \"text\"}>{props.value}</span>}\r\n    </div>\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {Button} from \"./Button\";\r\nimport {Display} from \"./Display\";\r\nimport '../../App.css'\r\n\r\n\r\nexport type CounterPropsType = {\r\n    valueToIncrement: number\r\n    maxValue: number\r\n    isSettingsInvalid: boolean\r\n    incValue: () => void\r\n    resetCounter: () => void\r\n    /*counterToSettings: () => void*/\r\n}\r\n\r\nexport const Counter = (props:CounterPropsType) => {\r\n    let [isIncButtonDisabled, setIsIncButtonDisabled] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        setIsIncButtonDisabled(props.valueToIncrement >= props.maxValue);\r\n    }, [props.valueToIncrement, props.maxValue])\r\n\r\n    return <div className=\"counter\">\r\n        <div>\r\n            <Display\r\n                value={props.valueToIncrement}\r\n                isSettingsInvalid={props.isSettingsInvalid}\r\n                maxValue={props.maxValue}\r\n            />\r\n        </div>\r\n        <div className={\"buttons\"}>\r\n            <Button\r\n                callBack={props.incValue}\r\n                title={\"Inc\"}\r\n                disabled={isIncButtonDisabled}\r\n            />\r\n            <Button\r\n                callBack={props.resetCounter}\r\n                title={\"Reset\"}\r\n            />\r\n            {/*<Button title={\"Settings\"} callBack={props.counterToSettings}\r\n            />*/}\r\n        </div>\r\n    </div>\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport '../../App.css';\r\nimport {Button} from \"../Counter/Button\";\r\n\r\nexport type SettingsPropsType = {\r\n    maxValue: number\r\n    valueToIncrement: number\r\n    setNewValuesCallback: (newStartValue: number, newMaxValue: number) => void\r\n    setIsSettingsInvalidCallback: (isSettingsInvalid: boolean) => void\r\n}\r\nexport const Settings = (props:SettingsPropsType) => {\r\n    let [startValue, setStartValue] = useState<number>(props.valueToIncrement)\r\n    let [maxValue, setMaxValue] = useState<number>(props.maxValue)\r\n    let [isSetButtonDisabled, setIsSetButtonDisabled] = useState<boolean>(props.valueToIncrement >= props.maxValue)\r\n\r\n    useEffect(() => {\r\n        props.setIsSettingsInvalidCallback(startValue >= maxValue);\r\n        setIsSetButtonDisabled(startValue >= maxValue);\r\n    }, [startValue, maxValue])\r\n\r\n    const callSetNewValueCallback = () => {\r\n        props.setNewValuesCallback(startValue, maxValue)\r\n    }\r\n\r\n    return <div className={\"counter\"}>\r\n        <div className={\"display\"}>\r\n            <span>\r\n             <span className={\"inputtitle\"}>max value: </span>\r\n             <input type={\"number\"} max={10} min={0} className={\"input\"} value={maxValue}\r\n                    onChange={(e) => setMaxValue(parseInt(e.currentTarget.value))}\r\n             />\r\n        </span>\r\n            <span>\r\n             <span className={\"inputtitle\"}>start value: </span>\r\n            <input type={\"number\"} max={10} min={0}  className={\"input\"} value={startValue}\r\n                   onChange={(e) => setStartValue(parseInt(e.currentTarget.value))}\r\n            />\r\n        </span>\r\n        </div>\r\n\r\n        <div className={\"buttons\"}>\r\n            <Button title={\"set\"} callBack={callSetNewValueCallback} disabled={isSetButtonDisabled}/>\r\n        </div>\r\n\r\n    </div>\r\n\r\n\r\n}","import React, {useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Counter} from \"./Components/Counter/Counter\";\nimport {Settings} from \"./Components/Settings/Settings\";\n\nfunction App() {\n  let [maxValue, setMaxValue] = useState(parseInt(localStorage.getItem('setMax') || '5'));\n  let [valueToIncrement, setValueToIncrement] = useState<number>(parseInt(localStorage.getItem('counterValue') || '0'));\n  let [isSettingsInvalid, setIsSettingsInvalid] = useState(false);\n  let [x, setX] = useState<boolean>(true)\n\n  const incValue = () => {\n    const newValueToIncrement = valueToIncrement + 1;\n    setValueToIncrement(newValueToIncrement)\n  }\n\n  const resetCounter = () => {\n    setValueToIncrement(parseInt(localStorage.getItem('counterValue') || '0'))\n  }\n\n  const setNewValues = (newStartValue: number, newMaxValue: number) => {\n    setX(true)\n    setValueToIncrement(newStartValue)\n    setMaxValue(newMaxValue)\n    setLocalStorage(newStartValue, newMaxValue);\n\n  }\n\n  const updateIsSettingsInvalid = (isSettingsInvalid: boolean) => {\n    setIsSettingsInvalid(isSettingsInvalid)\n  }\n\n  function setLocalStorage(newCounterValue: number, newMaxValue: number) {\n    localStorage.setItem('counterValue', JSON.stringify(newCounterValue))\n    localStorage.setItem('setMax', JSON.stringify(newMaxValue))\n  }\n /* function changeCounterToSettings() {\n    setX(false);\n  }*/\n\n  return (\n      <div className=\"App\">\n        <Counter\n            valueToIncrement={valueToIncrement}\n            maxValue={maxValue}\n            isSettingsInvalid={isSettingsInvalid}\n            incValue={incValue}\n            resetCounter={resetCounter}\n            /*counterToSettings={changeCounterToSettings}*/\n        />\n        <Settings\n            maxValue={maxValue}\n            valueToIncrement={valueToIncrement}\n            setNewValuesCallback={setNewValues}\n            setIsSettingsInvalidCallback={updateIsSettingsInvalid}\n\n        />\n      </div>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}