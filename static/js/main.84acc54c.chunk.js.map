{"version":3,"sources":["Components/Counter/Button.tsx","Components/Counter/Display.tsx","Components/Counter/Counter.tsx","Components/Settings/Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","className","error","disabled","title","onClick","callBack","Display","value","maxValue","Counter","incValue","resetCounter","Settings","useState","start","setStart","setMaxValue","type","max","min","onChange","e","currentTarget","newstart","JSON","parse","newMaxValue","getValues","App","setValue","setError","useEffect","valueAsString","localStorage","getItem","maxValueAsString","newValue","newMax","setItem","stringify","newStart","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84acc54c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport type ButtonPropsType = {\r\n\r\n    title: string\r\n    callBack: () => void\r\n    error?: boolean\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n    const useButton = () => {\r\n        props.callBack()\r\n    }\r\n    return <div>\r\n        <button\r\n            className={props.error? \"disabled\" :\"button\"}\r\n            disabled={props.error && props.title===\"Inc\"}\r\n            onClick={useButton}\r\n        >{props.title}</button>\r\n    </div>\r\n}","import React from \"react\";\r\nimport '../../App.css'\r\n\r\n\r\nexport type DisplayPropsType = {\r\n    value: number\r\n    maxValue: number\r\n}\r\n\r\nexport const Display = (props: DisplayPropsType) => {\r\n\r\n    return <div className={\"display\"}>\r\n        <span className={props.value===props.maxValue? \"error\" : \"text\"}>{props.value}</span>\r\n    </div>\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {Button} from \"./Button\";\r\nimport {Display} from \"./Display\";\r\nimport '../../App.css'\r\n\r\n\r\nexport type CounterPropsType = {\r\n    maxValue: number\r\n    error: boolean\r\n    value: number\r\n    incValue: () => void\r\n    resetCounter: () => void\r\n}\r\n\r\nexport const Counter = (props:CounterPropsType) => {\r\n    return <div className=\"counter\">\r\n        <div>\r\n            <Display\r\n                value={props.value}\r\n                maxValue={props.maxValue}\r\n            />\r\n        </div>\r\n        <div className={\"buttons\"}>\r\n            <Button\r\n                callBack={props.incValue}\r\n                title={\"Inc\"}\r\n                error={props.error}\r\n            />\r\n            <Button\r\n                callBack={props.resetCounter}\r\n                title={\"Reset\"}\r\n            />\r\n        </div>\r\n    </div>\r\n}","import React, {useState} from \"react\";\r\nimport '../../App.css';\r\nimport {Button} from \"../Counter/Button\";\r\n\r\nexport type SettingsPropsType = {\r\n    maxValue: number\r\n    value: number\r\n    getValues: (newStart: number, newMaxValue: number) => void\r\n}\r\nexport const Settings = (props:SettingsPropsType) => {\r\n    let [start, setStart] = useState<string>(\"0\")\r\n    let [maxValue, setMaxValue] = useState<string>(\"0\")\r\n\r\n    const onGetValues = () => {\r\n        let newstart = JSON.parse(start)\r\n        let newMaxValue = JSON.parse(maxValue)\r\n        props.getValues(newstart, newMaxValue)\r\n    }\r\n\r\n    return <div className={\"counter\"}>\r\n        <div className={\"display\"}>\r\n            <span>\r\n             <span className={\"inputtitle\"}>max value: </span>\r\n             <input type={\"number\"} max={10} min={0} className={\"input\"}\r\n                    onChange={(e) => setMaxValue(e.currentTarget.value)}\r\n             />\r\n        </span>\r\n            <span>\r\n             <span className={\"inputtitle\"}>start value: </span>\r\n            <input type={\"number\"} max={10} min={0}  className={\"input\"}\r\n                   onChange={(e) => setStart(e.currentTarget.value)}\r\n            />\r\n        </span>\r\n        </div>\r\n\r\n        <div className={\"buttons\"}>\r\n            <Button title={\"set\"} callBack={onGetValues}/>\r\n        </div>\r\n\r\n    </div>\r\n\r\n\r\n}","import React, {useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Counter} from \"./Components/Counter/Counter\";\nimport {Settings} from \"./Components/Settings/Settings\";\n\nfunction App() {\n  let [maxValue, setMaxValue] = useState(5);\n  let [value, setValue] = useState<number>(0);\n  let [error, setError] = useState(false);\n  useEffect(() => {\n    let valueAsString = localStorage.getItem('counterValue')\n    let maxValueAsString = localStorage.getItem('setMax')\n    /*let newError = localStorage.getItem('error')*/\n\n    if (valueAsString && maxValueAsString) {\n      let newValue = JSON.parse(valueAsString)\n      let newMax = JSON.parse(maxValueAsString)\n      setValue(newValue)\n      setMaxValue(newMax)\n      if (newValue >= newMax)\n        setError(true)\n    }\n\n  }, [])\n  useEffect(() => {\n    localStorage.setItem('error', JSON.stringify(error))\n    localStorage.setItem('counterValue', JSON.stringify(value))\n    localStorage.setItem('setMax', JSON.stringify(maxValue))\n\n  })\n  const incValue = () => {\n    setValue(value + 1)\n    if (value>=maxValue-1) {\n      setError(true)\n    }\n  }\n  const resetCounter = () => {\n    setValue(value = 0)\n\n    value>=maxValue ? setError(true): setError(false)\n\n  }\n  const getValues = (newStart:number, newMaxValue:number) => {\n    setValue(newStart)\n    setMaxValue(newMaxValue)\n    newStart>=newMaxValue-1?setError(true):setError(false)\n\n\n  }\n  return (\n      <div className=\"App\">\n        <Counter\n            value={value}\n            maxValue={maxValue}\n            error={error}\n            incValue={incValue}\n            resetCounter={resetCounter}\n        />\n        <Settings\n            maxValue={maxValue}\n            value={value}\n            getValues={getValues}\n        />\n      </div>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}